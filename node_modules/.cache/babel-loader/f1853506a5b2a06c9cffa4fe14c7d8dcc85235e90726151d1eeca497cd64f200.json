{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u5434\\u8BED\\u82E5\\\\Desktop\\\\\\u53EF\\u89C6\\u5316\\\\Project2\\\\src\\\\DotChartApp.js\",\n  _s = $RefreshSig$();\n//App组件\n\n//导入所需库、样式文件和已创建的组件\nimport React, { useState, useEffect } from 'react';\nimport './DotChartApp.css';\nimport * as d3 from 'd3';\nimport ScatterPlot from './ScatterPlot';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction DotChartApp() {\n  _s();\n  //使用useState创建变量\n  const [data, setData] = useState([]); //数据\n  const [selectedPoints, setSelectedPoints] = useState({}); //选中的点\n  const [xAxis, setXAxis] = useState('Log GDP per capita'); //x轴数据类型\n  const [yAxis, setYAxis] = useState('Life Ladder'); //y轴数据类型\n  const [Xmax, setXmax] = useState([]);\n  const [Ymax, setYmax] = useState([]);\n  const [axesOptions, setAxesOptions] = useState([]); //所有可选的数据类型\n  const [year, setYear] = useState('2023'); //年份\n  const regionColors = {\n    \"South Asia\": \"#1f77b4\",\n    \"Central and Eastern Europe\": \"#ff7f0e\",\n    \"Middle East and North Africa\": \"#2ca02c\",\n    \"Latin America and Caribbean\": \"#d62728\",\n    \"Sub-Saharan Africa\": \"#9467bd\",\n    \"Commonwealth of Independent States\": \"#8c564b\",\n    \"Eastern Europe and Central Asia\": \"#e377c2\",\n    \"North America and ANZ\": \"#7f7f7f\",\n    \"Western Europe\": \"#bcbd22\",\n    \"Southeast Asia\": \"#17becf\",\n    \"East Asia\": \"#ffa500\",\n    \"\": \"#ffe4e1\"\n  };\n\n  //在year、xAxis和yAxis更改时（选中的坐标轴数据类型变化时）重新运行\n  useEffect(() => {\n    //读取CSV文件，处理返回的数据\n    d3.csv('WHR_NEW.csv').then(data => {\n      // 获取CSV文件的所有列，过滤掉'Country name'和'Regional indicator'，设置axesOptions状态\n      const columns = data.columns;\n      setAxesOptions(columns.filter(column => column !== 'Country name' && column !== 'Regional indicator' && column !== 'year'));\n\n      //获取最大值以确定坐标轴范围\n      setXmax(d3.max(data, d => d[xAxis]));\n      setYmax(d3.max(data, d => d[yAxis]));\n\n      //根据选择的年份过滤数据并使用map函数处理数据中的每一项\n      const processedData = data.filter(item => item['year'] === year && item[xAxis] && item[yAxis]).map(item => ({\n        country: item['Country name'],\n        region: item['Regional indicator'],\n        x: item[xAxis],\n        y: item[yAxis],\n        isSelected: selectedPoints[item['Country name']]\n      }));\n\n      //设置data状态为处理后的数据\n      setData(processedData);\n    });\n  }, [xAxis, yAxis, year, selectedPoints]);\n\n  // 更新点的选中状态\n  const togglePoint = country => {\n    setSelectedPoints(prevSelectedPoints => ({\n      ...prevSelectedPoints,\n      [country]: !prevSelectedPoints[country]\n    }));\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"ScatterPlot\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"App\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"axisLable\",\n            children: \"X-Axis: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: xAxis,\n            onChange: e => setXAxis(e.target.value),\n            children: axesOptions.map(option =>\n            /*#__PURE__*/\n            //为axesOptions状态中的每一项创建一个 option 元素\n            _jsxDEV(\"option\", {\n              value: option,\n              children: option\n            }, option, false, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            className: \"axisLable\",\n            children: \"Y-Axis: \"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n            value: yAxis,\n            onChange: e => setYAxis(e.target.value),\n            children: axesOptions.map(option => /*#__PURE__*/_jsxDEV(\"option\", {\n              value: option,\n              children: option\n            }, option, false, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(ScatterPlot, {\n          data: data,\n          regionColors: regionColors,\n          xAxis: xAxis,\n          yAxis: yAxis,\n          togglePoint: togglePoint,\n          Xmax: Xmax,\n          Ymax: Ymax\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 19\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"label\", {\n            id: \"year\",\n            children: [\"Year: \", year]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"range\",\n            min: \"2008\",\n            max: \"2023\",\n            value: year,\n            onChange: e => setYear(e.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 97,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 71,\n    columnNumber: 5\n  }, this);\n}\n\n//导出App组件\n_s(DotChartApp, \"38sj7xstU/IQUjKYJWxGKxrOu1s=\");\n_c = DotChartApp;\nexport default DotChartApp;\nvar _c;\n$RefreshReg$(_c, \"DotChartApp\");","map":{"version":3,"names":["React","useState","useEffect","d3","ScatterPlot","jsxDEV","_jsxDEV","DotChartApp","_s","data","setData","selectedPoints","setSelectedPoints","xAxis","setXAxis","yAxis","setYAxis","Xmax","setXmax","Ymax","setYmax","axesOptions","setAxesOptions","year","setYear","regionColors","csv","then","columns","filter","column","max","d","processedData","item","map","country","region","x","y","isSelected","togglePoint","prevSelectedPoints","className","children","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","target","option","id","type","min","_c","$RefreshReg$"],"sources":["C:/Users/吴语若/Desktop/可视化/Project2/src/DotChartApp.js"],"sourcesContent":["//App组件\r\n\r\n//导入所需库、样式文件和已创建的组件\r\nimport React, { useState, useEffect } from 'react';\r\nimport './DotChartApp.css';\r\nimport * as d3 from 'd3';\r\nimport ScatterPlot from './ScatterPlot';\r\n\r\nfunction DotChartApp() {\r\n\r\n  //使用useState创建变量\r\n  const [data, setData] = useState([]);//数据\r\n  const [selectedPoints, setSelectedPoints] = useState({});//选中的点\r\n  const [xAxis, setXAxis] = useState('Log GDP per capita');//x轴数据类型\r\n  const [yAxis, setYAxis] = useState('Life Ladder');//y轴数据类型\r\n  const [Xmax, setXmax] = useState([]);\r\n  const [Ymax, setYmax] = useState([]);\r\n  const [axesOptions, setAxesOptions] = useState([]);//所有可选的数据类型\r\n  const [year, setYear] = useState('2023');//年份\r\n  const regionColors = {\r\n        \"South Asia\": \"#1f77b4\",\r\n        \"Central and Eastern Europe\": \"#ff7f0e\",\r\n        \"Middle East and North Africa\": \"#2ca02c\",\r\n        \"Latin America and Caribbean\": \"#d62728\",\r\n        \"Sub-Saharan Africa\": \"#9467bd\",\r\n        \"Commonwealth of Independent States\": \"#8c564b\",\r\n        \"Eastern Europe and Central Asia\": \"#e377c2\",\r\n        \"North America and ANZ\": \"#7f7f7f\",\r\n        \"Western Europe\": \"#bcbd22\",\r\n        \"Southeast Asia\": \"#17becf\",\r\n        \"East Asia\": \"#ffa500\",\r\n        \"\": \"#ffe4e1\"\r\n   };\r\n\r\n  //在year、xAxis和yAxis更改时（选中的坐标轴数据类型变化时）重新运行\r\n  useEffect(() => {\r\n\r\n    //读取CSV文件，处理返回的数据\r\n    d3.csv('WHR_NEW.csv').then(data => {\r\n      // 获取CSV文件的所有列，过滤掉'Country name'和'Regional indicator'，设置axesOptions状态\r\n      const columns = data.columns;\r\n      setAxesOptions(columns.filter(column => column !== 'Country name' && column !== 'Regional indicator' && column !== 'year'));\r\n\r\n      //获取最大值以确定坐标轴范围\r\n      setXmax(d3.max(data, d => d[xAxis]));\r\n      setYmax(d3.max(data, d => d[yAxis]));\r\n\r\n      //根据选择的年份过滤数据并使用map函数处理数据中的每一项\r\n      const processedData = data.filter(item => item['year'] === year && item[xAxis] && item[yAxis]).map(item => ({\r\n        country: item['Country name'],\r\n        region: item['Regional indicator'],\r\n        x: item[xAxis],\r\n        y: item[yAxis],\r\n        isSelected: selectedPoints[item['Country name']]\r\n      }));\r\n\r\n      //设置data状态为处理后的数据\r\n      setData(processedData);\r\n    });\r\n  }, [xAxis, yAxis, year, selectedPoints]);\r\n\r\n  // 更新点的选中状态\r\n  const togglePoint = (country) => {\r\n    setSelectedPoints(prevSelectedPoints => ({\r\n      ...prevSelectedPoints,\r\n      [country]: !prevSelectedPoints[country]\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <div className=\"App\"> \r\n      <header className=\"App-header\"> \r\n        <h1>\r\n          ScatterPlot\r\n        </h1>\r\n        <div className=\"App\">\r\n          <div>\r\n            <label className=\"axisLable\">X-Axis: </label> \r\n            <select value={xAxis} onChange={e => setXAxis(e.target.value)}>\r\n              {axesOptions.map(option => (\r\n                //为axesOptions状态中的每一项创建一个 option 元素\r\n                <option key={option} value={option}>{option}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n          <div>\r\n          <label className=\"axisLable\">Y-Axis: </label> \r\n            <select value={yAxis} onChange={e => setYAxis(e.target.value)}>\r\n              {axesOptions.map(option => (\r\n                <option key={option} value={option}>{option}</option>\r\n              ))}\r\n            </select>\r\n          </div>\r\n                  <ScatterPlot data={data} regionColors={regionColors} xAxis={xAxis} yAxis={yAxis} togglePoint={togglePoint} Xmax={Xmax} Ymax={Ymax}/>\r\n          <div>\r\n            <label id = \"year\">Year: {year}</label>\r\n            <input\r\n              type=\"range\"\r\n              min=\"2008\"\r\n              max=\"2023\"\r\n              value={year}\r\n              onChange={e => setYear(e.target.value)}\r\n            />\r\n          </div>\r\n          <br />\r\n        </div>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\n//导出App组件\r\nexport default DotChartApp;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}